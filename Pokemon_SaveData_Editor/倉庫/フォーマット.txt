♪ブロックデータ
セーブデータには，ある単位で区切られた一かたまりがあります．以下，ブロックデータと呼びます．
ブロックデータおきにチェックサムなどを計算します．

１：ブロックデータの基本的構造
0x0000 -> 0x0ff3：実際のデータ
0x0ff4 -> 0x0fff：フッタ

２：フッタの構造
0xff4         ：ブロックナンバー（0x00 -> 0x0d 後述）
0xff5         ：定数(0x00)
0xff6 -> 0xff7：チェックサム
0xff8 -> 0x00b：定数(0x08012025)
0xffc -> 0xffd：セーブ回数
0xffe -> 0xfff：定数(0x0000)

３：チェックサム計算方法

３−１：4バイトごとに足し算
0xff4までについて，4バイトごとに足し算を行います．

３−２：2バイトに変更する
３−１で出た数字を上下で二つの2バイトの数値に変更し，足し算をおこないます．
これがチェックサムです．

♪ブロックデータの並び方
ポケモンのセーブデータにおいてデータは以下のように並んでいます．

[a回目のセーブ](0x00000000 -> 0x0000dfff)
[b回目のセーブ](0x0000e000 -> 0x0001bfff)
[最終ブロック（解析不能）](0x0x0001c000 -> 0x0001ffff)

※|a-b|=1

♪各セーブデータ
各セーブデータに関しては，0x00から0x0dまでの「ブロックデータ」がある番号から始ま
り，ローテートしていって一周して終わります．
たとえば

[0x0b][0x0c][0xd][0x0][0x1][0x2]・・・[0x09][0x0a]

という感じです．

♪セーブ回数カウントによるブロックの並びの変化
第１回：[0x00]から
第２回：[0x0d]から
と一つづつ戻っていきます．一般的にｎ回目は
(0x0e-((n-0x0e)%0x0e)) % 0x0e
のブロックから始まります．
しかし，途中でズレてしまう事もあるようです．最初のほうはこれであっているんです
が・・・．ブロックの並び順はセーブデータのチェックに引っかかるかと関係ないので，
妥協しました．
