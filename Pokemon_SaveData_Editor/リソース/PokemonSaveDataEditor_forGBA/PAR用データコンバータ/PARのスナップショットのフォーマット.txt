VisualBoyAdvanceのソースから判明した，データフォーマットをご紹介します．
　詳しくは，src\GBA.cpp内の関数，

bool CPUWriteGSASnapshot(const char *fileName, 
                         const char *title, 
                         const char *desc, 
                         const char *notes)
を参照してください．version1.7.2では983行あたりです．
あとは
	Let's Emu! : GB/GBA/DS ハードウェア チップ集 (GBA)
	http://www.geocities.co.jp/Playtown-Yoyo/6130/tech_gba.htm
こちらも参考にさせていただきました．

♪フォーマット構造
	 4バイト：定数（=0x0000000d）
	13バイト：定数（="SharkPortSave"）
		　　　（= 0x53 0x68 0x61 0x72 0x6B 0x50 0x6F
		　　　　  0x72 0x74 0x53 0x61 0x76 0x65）
	 4バイト：定数（=0x000f0000）
	 4バイト：タイトルの長さ
	　不定　：タイトル
 	4バイト ：説明の長さ
	　不定　：説明
 	4バイト	：情報の長さ
	　不定　：情報
 	4バイト	：ROM情報ヘッダとセーブデータ本体の長さ(今回は0x1001c)

|ROM　 16バイト ：ROMデータのオフセット0xa0から始まる名前
|情		　（例："POKEMON EMERBPEJ"）
|報 	1バイト	：ROMデータの0xbeの値（予約済みエリア：旧チェックサム 0x00）
|ヘ 	1バイト	：ROMデータの0xbfの値（予約済みエリア：旧チェックサム 0x00）
|ッ 	1バイト	：ROMデータの0xbdの値
|ダ			（コンプレメントチェック：GBAROMヘッダのチェックサム）
|	1バイト	：ROMデータの0xb0の値（ゲームメーカーコード）
|長さ 	1バイト	：定数（0x01）
|0x1c 	7バイト	：定数（0x00 0x00 0x00 0x00 0x00 0x00 0x00）

  0x10000バイト ：実際のセーブデータ
	4バイト ：ROM情報ヘッダとセーブデータ本体のCRC32

♪CRC32計算方法
Javaではunsignedが使えないんですが，仮に使えるとすると，

unsigned byte[] data;//ROM情報ヘッダとセーブデータ本体のバイト配列
unsigned int crc;//CRC32
for(int i=0;i<data.length;i++){
	crc += data[i] << (crc % 0x18)
}

　こういう感じです．このツールはJavaですので足し算部分が結構面倒だったりします．
言葉で説明し辛いですががんばってみますと，
・crcにデータをcrcを24で割った余りだけ左シフトして足す．
で良いですか？書き込む順はリトルエンディアンです．

　PARとはこれでチェックサムが合いますが，VBAとはなぜか合いません．VBAを参考にし
たのに・・・．でもどちらにしろ読み込むので，チェックサムは実質関係ないみたいです．